if (!customElements.get('lottie-player')) {
    const script = document.createElement('script');
    script.src = "https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js";
    document.head.appendChild(script);
  }
;
(function () {
  const mapboxToken = "pk.eyJ1IjoibWF4aW1nbG9iaW8iLCJhIjoiY205ZTV1Z3Q0MTJuZjJrczduaWpmczFxOSJ9.uxg6_dvAoTHfmhAicl9pjA";
  function initializeMap(lat, lon) {
    if (typeof mapboxgl === 'undefined') {
      console.log('Mapbox not loaded yet, retrying...');
      setTimeout(() => initializeMap(lat, lon), 1000);
      return;
    }
    mapboxgl.accessToken = mapboxToken;
    const map = new mapboxgl.Map({
      container: 'dynamic-map',
      style: 'mapbox://styles/mapbox/light-v10',
      center: [lon, lat],
      zoom: 5.5,
      projection: 'globe',
      interactive: false
    });
    map.on('style.load', () => {
      map.setFog({
        color: 'white',
        'high-color': '#add8e6',
        'horizon-blend': 0.2,
        'space-color': '#dfefff',
        'star-intensity': 0.0
      });
    });
  }
  function geocodeLocation(query, callback) {
    fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`)
      .then(res => res.json())
      .then(data => {
        if (data && data.length > 0) {
          const lat = parseFloat(data[0].lat);
          const lon = parseFloat(data[0].lon);
          callback(lat, lon);
        } else {
          fallbackLocation(callback);
        }
      })
      .catch(() => fallbackLocation(callback));
  }
  function fallbackLocation(callback) {
    fetch('https://ipapi.co/json/')
      .then(res => res.json())
      .then(data => {
        const lat = data.latitude;
        const lon = data.longitude;
        window.userLocation = `${data.city}, ${data.country_name}`;
        callback(lat, lon);
      })
      .catch(() => {
        window.userLocation = 'Alanya, Turkey';
        callback(36.5438, 32.0060);
      });
  }
  function loadMap() {
    const manualLocation = localStorage.getItem("userLocation");
    if (manualLocation) {
      geocodeLocation(manualLocation, initializeMap);
    } else {
      fallbackLocation(initializeMap);
    }
  }
  function initializeUserProfile() {
    const authRaw = localStorage.getItem('auth');
    if (authRaw) {
      try {
        const auth = JSON.parse(authRaw);
        const userId = auth.id;
        if (userId) {
          fetch(`https://xu8w-at8q-hywg.n7d.xano.io/api:WT6s5fz4/one_thing_users/${userId}`)
            .then(response => response.json())
            .then(data => {
              if (data.picture) {
                document.getElementById('user-avatar').src = data.picture;
                document.getElementById('user-menu-avatar').src = data.picture;
              }
              if (data.name) {
                document.getElementById('user-menu-name').textContent = data.name;
                document.getElementById('dropdown-user-name').textContent = data.name;
              }
              if (data.email) {
                document.getElementById('dropdown-user-email').textContent = data.email;
              }
            })
            .catch(error => {
              console.error('Error loading user data:', error);
            });
        }
      } catch (e) {
        console.error('Error parsing auth from localStorage:', e);
      }
    }
  }
  function initializeLocation() {
    function updateLocationUI(value) {
      const locationText = value || "your place";
      window.userLocation = locationText;
      const locationTextContainer = document.getElementById('location-text');
      if (locationTextContainer) {
        locationTextContainer.innerHTML = `
          <span class="location-prefix">Feel at Home in</span>
          <span id="location-clickable">
            <span id="location-detect" class="location-name">${locationText}</span>
            <img src="https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/6826567e4c85159257ae5e4e_811a212cf32b6b680a0b472b1a82f601_edit%202-dark.svg" alt="Edit icon" />
          </span>
        `;
        const newLocationClickable = locationTextContainer.querySelector('#location-clickable');
        if (newLocationClickable) {
          newLocationClickable.addEventListener('click', showLocationPrompt);
        }
      }
    }
    function showLocationPrompt() {
      const locationModal = document.getElementById('location-modal');
      if (locationModal) {
        locationModal.classList.add('show');
        const locationInput = document.getElementById('location-input');
        if (locationInput) {
          locationInput.focus();
        }
      }
    }
    document.getElementById('location-clickable').addEventListener('click', showLocationPrompt);
    document.getElementById('mobile-pin').addEventListener('click', showLocationPrompt);
    const savedLocation = localStorage.getItem("userLocation");
    if (savedLocation) {
      updateLocationUI(savedLocation);
    } else {
      fetch('https://ipapi.co/json/')
        .then(res => res.json())
        .then(data => {
          const auto = data.city && data.country_name
            ? `${data.city}, ${data.country_name}`
            : data.city || data.country_name || "your place";
          localStorage.setItem("userLocation", auto);
          updateLocationUI(auto);
        })
        .catch(() => {
          updateLocationUI("your place");
        });
    }
  }
  function initializeUserDropdown() {
    const userMenuButton = document.getElementById('user-menu-button');
    const userDropdown = document.getElementById('user-dropdown');
    userMenuButton.addEventListener('click', (e) => {
      e.stopPropagation();
      userDropdown.classList.toggle('show');
    });
    document.addEventListener('click', (e) => {
      if (!userMenuButton.contains(e.target) && !userDropdown.contains(e.target)) {
        userDropdown.classList.remove('show');
      }
    });
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        userDropdown.classList.remove('show');
      }
    });
  }
  function initializeMyContextModal() {
    const myContextBtn = document.getElementById('my-context-btn');
    const myContextModal = document.getElementById('my-context-modal');
    const closeModalBtn = document.getElementById('close-my-context-modal');
    const saveBtn = document.getElementById('save-context-btn');
    const hasKids = localStorage.getItem('hasKids') === 'true';
    const hasPets = localStorage.getItem('hasPets') === 'true';
    const hasCar = localStorage.getItem('hasCar') === 'true';
    document.getElementById('has-kids').checked = hasKids;
    document.getElementById('has-pets').checked = hasPets;
    document.getElementById('has-car').checked = hasCar;
    myContextBtn.addEventListener('click', () => {
      userDropdown.classList.remove('show');
      myContextModal.classList.add('show');
    });
    closeModalBtn.addEventListener('click', () => {
      myContextModal.classList.remove('show');
    });
    myContextModal.addEventListener('click', (e) => {
      if (e.target === myContextModal) {
        myContextModal.classList.remove('show');
      }
    });
    saveBtn.addEventListener('click', () => {
      const hasKids = document.getElementById('has-kids').checked;
      const hasPets = document.getElementById('has-pets').checked;
      const hasCar = document.getElementById('has-car').checked;
      localStorage.setItem('hasKids', hasKids);
      localStorage.setItem('hasPets', hasPets);
      localStorage.setItem('hasCar', hasCar);
      myContextModal.classList.remove('show');
      showSuccessTooltip();
    });
  }
  function updateLocationUIFromModal(locationName) {
    console.log('Updating location UI with:', locationName); // Debug log
    window.userLocation = locationName;
    const locationTextContainer = document.getElementById('location-text');
    console.log('Location text container found:', !!locationTextContainer); // Debug log
    if (locationTextContainer) {
      locationTextContainer.innerHTML = `
        <span class="location-prefix">Feel at Home in</span>
        <span id="location-clickable">
          <span id="location-detect" class="location-name">${locationName}</span>
          <img src="https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/6826567e4c85159257ae5e4e_811a212cf32b6b680a0b472b1a82f601_edit%202-dark.svg" alt="Edit icon" />
        </span>
      `;
      const newLocationClickable = locationTextContainer.querySelector('#location-clickable');
      console.log('New location clickable found:', !!newLocationClickable); // Debug log
      if (newLocationClickable) {
        newLocationClickable.addEventListener('click', () => {
          console.log('New location clickable clicked'); // Debug log
          const locationModal = document.getElementById('location-modal');
          if (locationModal) {
            locationModal.classList.add('show');
            const locationInput = document.getElementById('location-input');
            if (locationInput) {
              locationInput.focus();
            }
          }
        });
        console.log('Event listener attached to new location clickable'); // Debug log
      }
    }
    console.log('Location UI update completed'); // Debug log
  }
  function initializeLocationModal() {
    const locationModal = document.getElementById('location-modal');
    const closeLocationModal = document.getElementById('close-location-modal');
    const locationInput = document.getElementById('location-input');
    const locationDetectBtn = document.getElementById('location-detect-btn');
    const locationResults = document.getElementById('location-results');
    const locationClickable = document.getElementById('location-clickable');
    if (locationClickable) {
      locationClickable.addEventListener('click', () => {
        locationModal.classList.add('show');
        locationInput.focus();
      });
    }
    function closeModal() {
      console.log('Closing modal...'); // Debug log
      locationModal.classList.remove('show');
      locationInput.value = '';
      locationResults.innerHTML = '';
      console.log('Modal closed'); // Debug log
    }
    closeLocationModal.addEventListener('click', closeModal);
    locationModal.addEventListener('click', (e) => {
      if (e.target === locationModal) {
        closeModal();
      }
    });
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && locationModal.classList.contains('show')) {
        closeModal();
      }
    });
    async function searchLocation(query) {
      if (!query.trim()) return;
      locationResults.innerHTML = '<div class="location-result-item loading"><div class="location-spinner"></div><div class="location-content"><div class="location-name">Searching locations...</div></div></div>';
      try {
        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=5`);
        const data = await response.json();
        displayLocationResults(data);
      } catch (error) {
        console.error('Error searching location:', error);
        locationResults.innerHTML = '<div class="location-result-item error"><div class="location-error-icon"><img src="https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/6889eb961e515115851948da_9c301540e2805651f3355e19910b6585_pin-2.svg" alt="Error" width="20" height="20"></div><div class="location-content"><div class="location-name">Search error</div><div class="location-details">Please try again</div></div></div>';
      }
    }
    function displayLocationResults(results) {
      if (results.length === 0) {
        locationResults.innerHTML = '<div class="location-result-item no-results"><div class="location-icon"><img src="https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/6889eb961e515115851948da_9c301540e2805651f3355e19910b6585_pin-2.svg" alt="Location" width="20" height="20"></div><div class="location-content"><div class="location-name">No locations found</div><div class="location-details">Try a different search term</div></div></div>';
        return;
      }
      locationResults.innerHTML = results.map(result => {
        const displayName = result.display_name.split(', ').slice(0, 2).join(', ');
        return `
          <div class="location-result-item" data-lat="${result.lat}" data-lon="${result.lon}" data-display-name="${result.display_name}">
            <div class="location-icon"><img src="https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/6889eb961e515115851948da_9c301540e2805651f3355e19910b6585_pin-2.svg" alt="Location" width="20" height="20"></div>
            <div class="location-content">
              <div class="location-name">${displayName}</div>
              <div class="location-details">${result.display_name}</div>
            </div>
          </div>
        `;
      }).join('');
      locationResults.querySelectorAll('.location-result-item').forEach(item => {
        item.addEventListener('click', () => {
          console.log('Location item clicked:', item.dataset); // Debug log
          const lat = item.dataset.lat;
          const lon = item.dataset.lon;
          let displayName = item.dataset.displayName;
          const parts = displayName.split(', ');
          if (parts.length > 2) {
            const city = parts[0];
            const country = parts[parts.length - 1];
            displayName = `${city}, ${country}`;
          }
          localStorage.setItem('userLocation', displayName);
          if (window.map) {
            window.map.setCenter([parseFloat(lon), parseFloat(lat)]);
            window.map.setZoom(10);
          }
          closeModal();
          updateLocationUIFromModal(displayName);
          showLocationSuccessTooltip();
          setTimeout(() => {
            location.reload();
          }, 1000);
        });
      });
    }
    locationInput.addEventListener('input', () => {
      const query = locationInput.value.trim();
      if (query) {
        clearTimeout(window.autosuggestTimeout);
        window.autosuggestTimeout = setTimeout(() => {
          if (query.length >= 2) { // Only search if 2+ characters
            searchLocation(query);
          }
        }, 300);
      } else {
        locationResults.innerHTML = '';
      }
    });
    locationInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        const query = locationInput.value.trim();
        if (query) {
          searchLocation(query);
        }
      }
    });
    locationInput.addEventListener('blur', () => {
      const query = locationInput.value.trim();
      if (query && query.length >= 2) {
        searchLocation(query);
      }
    });
    locationDetectBtn.addEventListener('click', async () => {
      if (navigator.geolocation) {
        try {
          const position = await new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition(resolve, reject);
          });
          const { latitude, longitude } = position.coords;
          const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&zoom=10`);
          const data = await response.json();
          if (data.display_name) {
            let locationName = data.display_name;
            const parts = locationName.split(', ');
            if (parts.length > 2) {
              const city = parts[0];
              const country = parts[parts.length - 1];
              locationName = `${city}, ${country}`;
            }
            localStorage.setItem('userLocation', locationName);
            updateLocationUIFromModal(locationName);
            if (window.map) {
              window.map.setCenter([longitude, latitude]);
              window.map.setZoom(10);
            }
            closeModal();
            showLocationSuccessTooltip();
            setTimeout(() => {
              location.reload();
            }, 1000);
          }
        } catch (error) {
          console.error('Error getting current location:', error);
          showLocationErrorTooltip('Could not get your current location. Please try searching manually.');
        }
      } else {
        showLocationErrorTooltip('Geolocation is not supported by this browser.');
      }
    });
  }
  function initializeLogout() {
    const logoutBtn = document.getElementById('logout-btn');
    logoutBtn.addEventListener('click', () => {
      userDropdown.classList.remove('show');
      localStorage.removeItem('auth');
      localStorage.removeItem('userId');
      location.reload();
    });
  }
  function initializeEverything() {
    loadMap();
    initializeUserProfile();
    initializeLocation();
    initializeUserDropdown();
    initializeMyContextModal();
    initializeLocationModal();
    initializeLogout();
  }
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeEverything);
  } else {
    initializeEverything();
  }
  window.getUserContext = () => {
    return {
      location: window.userLocation || 'your place',
      hasKids: localStorage.getItem('hasKids') === 'true',
      hasPets: localStorage.getItem('hasPets') === 'true',
      hasCar: localStorage.getItem('hasCar') === 'true'
    };
  }
  const API_SUGGEST = 'https://xu8w-at8q-hywg.n7d.xano.io/api:WT6s5fz4/get_card';
  const API_SAVE = 'https://xu8w-at8q-hywg.n7d.xano.io/api:WT6s5fz4/one_thing_users_cards';
  const API_USERS = 'https://xu8w-at8q-hywg.n7d.xano.io/api:WT6s5fz4/one_thing_users';
  const API_SET_CARD_PUBLISH = 'https://xu8w-at8q-hywg.n7d.xano.io/api:WT6s5fz4/set_card_param'
  const API_SET_CARD_UPLOAD_IMAGE = 'https://xu8w-at8q-hywg.n7d.xano.io/api:WT6s5fz4/upload/image'
  const MAX_ATTEMPTS = 3;
  const EXPIRY_MS = 30 * 24 * 60 * 60 * 1000; // 30 days
  let attemptsLeft = parseInt(localStorage.getItem('attemptsLeftAccount')) || MAX_ATTEMPTS;
  let resetTime = parseInt(localStorage.getItem('resetTimeAccount')) || getMidnightTimestamp();
  var savedCards = [];
  const savedButton = document.querySelector('button[data-filter="saved"]');
  const completedButton = document.querySelector('button[data-filter="completed"]');
  const communityButton = document.querySelector('button[data-filter="community"]');
  var uploadFileName = '';
  function ensureUserId() {
    let userId = localStorage.getItem('userId');
    if (!userId) {
      const auth = localStorage.getItem('auth');
      if (auth) {
        try {
          const authObj = JSON.parse(auth);
          if (authObj.id) {
            userId = authObj.id;
            localStorage.setItem('userId', userId);
            console.log('✅ Set userId from auth object:', userId);
          }
        } catch (e) {
          console.error('Error parsing auth object:', e);
        }
      }
    }
    return userId;
  }
  let currentSuggestion = null;
  let currentCategoryFilter = localStorage.getItem('currentCategoryFilter') || 'all';
  let currentTypeFilter = localStorage.getItem('currentTypeFilter') || 'saved';
  const btn = document.getElementById('one-thing-btn');
  const attemptsCounter = document.getElementById('attempts-counter');
  const popup = document.getElementById('one-thing-popup');
  const popupTitle = document.getElementById('popup-title');
  const popupDesc = document.getElementById('popup-desc');
  const btnSave = document.getElementById('popup-save');
  const btnSkip = document.getElementById('popup-skip');
  const cardList = document.getElementById('one-thing-card-list');
  const filterButtons = document.querySelectorAll('.filter-buttons button');
  const filterButtonsDropdown = document.querySelectorAll('.filter-buttons dropdown-container button');
  const filterButtonsGroup = document.querySelectorAll('.filter-buttons .filter-group button');
  console.log('filterButtonsDropdown', filterButtonsDropdown);
  console.log('filterButtonsGroup', filterButtonsGroup);
  setTimeout(() => {
    ensureUserId();
  }, 5000);
  updateCounterUI();
  filterButtonsDropdown.forEach(btn => {
    btn.classList.remove('active');
    if (btn.getAttribute('data-filter') === currentTypeFilter) {
      btn.classList.add('active');
    }
  });
  filterButtonsGroup.forEach(btn => {
    btn.classList.remove('active');
    if (btn.getAttribute('data-filter') === currentTypeFilter) {
      btn.classList.add('active');
      if (currentTypeFilter === 'saved') {
          loadSavedUserCards();
      }
      if (currentTypeFilter === 'completed') {
          loadCompletedUserCards();
      }
      if (currentTypeFilter === 'community') {
          loadCommunityUserCards();
      }
    }
  });
  renderCardList(currentTypeFilter, currentCategoryFilter); // Start with saved cards by default
  initializeDropdown();
  function initializeEventListeners() {
    updateCounterUI();
      filterButtonsDropdown.forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-filter') === currentTypeFilter) {
          btn.classList.add('active');
        }
      });
      filterButtonsGroup.forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-filter') === currentTypeFilter) {
          btn.classList.add('active');
        }
      });
    renderCardList(currentTypeFilter, currentCategoryFilter);
    const cancelBtn = document.getElementById('confirmation-cancel');
    const confirmBtn = document.getElementById('confirmation-confirm');
    if (cancelBtn) {
      cancelBtn.addEventListener('click', hideConfirmationPopup);
    } else {
      console.error('Confirmation cancel button not found');
    }
    if (confirmBtn) {
      confirmBtn.addEventListener('click', () => {
        const popup = document.getElementById('confirmation-popup');
        const cardId = popup.dataset.cardId;
        const action = popup.dataset.action;
        console.log('Confirmation button clicked:', action, 'for card:', cardId);
        if (cardId && action) {
          if (action === 'make-public') {
            makeCardPublic(cardId);
          } else if (action === 'make-private') {
            makeCardPrivate(cardId);
          }
          hideConfirmationPopup();
        } else {
          console.error('Missing cardId or action:', { cardId, action });
        }
      });
    }
    const confirmationPopup = document.getElementById('confirmation-popup');
    if (confirmationPopup) {
      confirmationPopup.addEventListener('click', (e) => {
        if (e.target === confirmationPopup) {
          hideConfirmationPopup();
        }
      });
    }
    const copyBtn = document.getElementById('copy-referral-btn');
    const referralCloseBtn = document.getElementById('referral-close');
    const referralPopup = document.getElementById('referral-popup');
    if (copyBtn) {
      copyBtn.addEventListener('click', copyReferralLink);
    }
    if (referralCloseBtn) {
      referralCloseBtn.addEventListener('click', hideReferralPopup);
    }
    if (referralPopup) {
      referralPopup.addEventListener('click', (e) => {
        if (e.target === referralPopup) {
          hideReferralPopup();
        }
      });
    }
    const copyCommunityBtn = document.getElementById('copy-community-referral-btn');
    const communityCloseBtn = document.getElementById('community-popup-close');
    const communityPopup = document.getElementById('community-empty-popup');
    if (copyCommunityBtn) {
      copyCommunityBtn.addEventListener('click', copyCommunityReferralLink);
    }
    if (communityCloseBtn) {
      communityCloseBtn.addEventListener('click', hideCommunityEmptyPopup);
    }
    if (communityPopup) {
      communityPopup.addEventListener('click', (e) => {
        if (e.target === communityPopup) {
          hideCommunityEmptyPopup();
        }
      });
    }
  }
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeEventListeners);
  } else {
    initializeEventListeners();
  }
  btn.addEventListener('click', () => {
    if (attemptsLeft <= 0) return;
    btn.classList.add('loading');
    startLoadingAnimation();
    const context = window.getUserContext ? window.getUserContext() : {};
    let qs = '?';
    for (const key in context) {
      if (context.hasOwnProperty(key)) qs += encodeURIComponent(key) + '=' + encodeURIComponent(context[key]) + '&';
    }
    fetch(API_SUGGEST + qs, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json', 'one-thing-session-id': generateUUID() }
    })
      .then(res => res.json())
      .then(data => {
        btn.classList.remove('loading');
        stopLoadingAnimation();
        console.log('API response debug:', data);
        currentSuggestion = {
          id: data.id || data.card_id || data.cardId || data.card?.id || data.item?.id || data.thing?.id || data.name || 'generated-' + Date.now(),
          title: data.title || data.name || 'No Tip This Time',
          description: data.description || 'Sometimes even the best advice needs a rest. Come back later.',
          category: data.category || data.card?.category || data.item?.category || data.thing?.category || 'places'
        };
        console.log('Current suggestion debug:', currentSuggestion);
        showPopup(currentSuggestion);
      })
      .catch(err => {
        btn.classList.remove('loading');
        stopLoadingAnimation();
        console.error(err);
      });
  });
  btnSave.addEventListener('click', () => {
    if (!currentSuggestion) return;
    const userId = ensureUserId();
    console.log('currentSuggestion', currentSuggestion);
    if (userId && currentSuggestion.id) {
      fetch(API_SAVE, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ one_thing_users_id: userId, one_thing_cards_id: currentSuggestion.id, expired_at: Date.now() + 1000 * 60 * 60 * 24 * 30 })
      })
      .then(response => {
        return response.json();
      })
      .then(data => {
          loadSavedUserCards();
      })
      .catch(err => console.error(err));
    }
    console.log('test');
    decrementAttempts();
    filterButtonsGroup.forEach(b => b.classList.remove('active'));
    const savedButton = document.querySelector('button[data-filter="saved"]');
    if (savedButton) {
      savedButton.classList.add('active');
    }
    renderCardList('saved', currentCategoryFilter);
    hidePopup();
  });
  btnSkip.addEventListener('click', () => {
    decrementAttempts();
    console.log('BUTTON SKIP');
    filterButtonsGroup.forEach(b => b.classList.remove('active'));
    const completedButton = document.querySelector('button[data-filter="completed"]');
    if (completedButton) {
      completedButton.classList.add('active');
    }
    renderCardList('completed', currentCategoryFilter);
    hidePopup();
  });
  filterButtonsGroup.forEach(btn => {
    btn.addEventListener('click', () => {
      console.log('BUTTON FILTER GROUP');
      console.log('filterButtons group = ', filterButtons);
      filterButtonsGroup.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      currentTypeFilter = btn.getAttribute('data-filter');
      console.log('SET FILTER', currentTypeFilter);
      localStorage.setItem('currentTypeFilter', currentTypeFilter);
      renderCardList(currentTypeFilter, currentCategoryFilter);
    });
  });
  filterButtonsDropdown.forEach(btn => {
    btn.addEventListener('click', () => {
      console.log('BUTTON FILTER dropdown');
      console.log('filterButtons dropdown = ', filterButtonsDropdown);
      filterButtonsDropdown.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      currentTypeFilter = btn.getAttribute('data-filter');
      console.log('SET FILTER', currentTypeFilter);
      localStorage.setItem('currentCategoryFilter', currentTypeFilter);
      renderCardList(currentTypeFilter, currentCategoryFilter);
    });
  });
  function showPopup(card) {
    const category = card.category || 'places'; // Default to places if not specified
    const categoryText = getCategoryText(category);
    const categoryIcon = getCategoryIcon(category);
    console.log('Popup category debug:', {
      originalCategory: card.category,
      finalCategory: category,
      categoryText: categoryText,
      pillClass: 'popup-category-pill ' + category
    });
    const categoryPill = document.getElementById('popup-category');
    const categoryTextElement = document.getElementById('popup-category-text');
    const categoryImage = document.getElementById('popup-category-image');
    categoryTextElement.textContent = categoryText;
    categoryImage.src = categoryIcon;
    popupTitle.textContent = card.title;
    popupDesc.textContent = card.description;
    const categoryClass = category.toLowerCase().replace(/\s+/g, '-');
    categoryPill.className = 'popup-category-pill ' + categoryClass;
    const popupElement = document.getElementById('one-thing-popup');
    popupElement.style.position = 'fixed';
    popupElement.style.top = '0';
    popupElement.style.left = '0';
    popupElement.style.width = '100vw';
    popupElement.style.height = '100vh';
    popupElement.style.zIndex = '999999';
    popup.classList.add('show');
  }
  function hidePopup() {
    popup.classList.remove('show');
    currentSuggestion = null;
  }
  function getCategoryText(category) {
    const categories = {
      'places': 'Places',
      'daily': 'Daily Things',
      'local': 'Local Context',
      'DAILY THINGS': 'Daily Things',
      'PLACES': 'Places',
      'LOCAL CONTEXT': 'Local Context'
    };
    return categories[category] || 'Places';
  }
  function getCategoryIcon(category) {
    const icons = {
      'places': 'https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/6826448f03113f68969d46cd_f5b48ffdd38299fb12160bbb19947d4e_places-w-icon.avif',
      'daily': 'https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/6826448ecfee5d81a38cfe2b_2d10e4120ba1f04e841d77b0ac0343f1_daily-things-w-icon.avif',
      'local': 'https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/6826448ed894827a2b78fa6f_cb98b2f22368b7cf361ebfcac726e4a_local-context-w-icon.avif',
      'DAILY THINGS': 'https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/6826448ecfee5d81a38cfe2b_2d10e4120ba1f04e841d77b0ac0343f1_daily-things-w-icon.avif',
      'PLACES': 'https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/6826448f03113f68969d46cd_f5b48ffdd38299fb12160bbb19947d4e_places-w-icon.avif',
      'LOCAL CONTEXT': 'https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/6826448ed894827a2b78fa6f_cb98b2f22368b7cf361ebfcac726e4a_local-context-w-icon.avif'
    };
    return icons[category] || icons['places'];
  }
  function decrementAttempts() {
    attemptsLeft--;
    localStorage.setItem('attemptsLeftAccount', attemptsLeft);
    localStorage.setItem('resetTimeAccount', resetTime);
    updateCounterUI();
  }
  const loadingPhrases = [
    "Gathering one thing…",
    "Asking locals for secrets…",
    "Digging for hidden gems…",
    "Searching cozy nooks…",
    "Extracting calm in chaos…",
    "Sneaking past tourist traps…"
  ];
  let currentLoadingIndex = 0;
  let loadingInterval = null;
  function updateCounterUI() {
    const oneThingBtn = document.getElementById('one-thing-btn');
    if (attemptsLeft > 0) {
      attemptsCounter.textContent = `${attemptsLeft} / ${MAX_ATTEMPTS} left today`;
      attemptsCounter.classList.remove('no-attempts');
      oneThingBtn.classList.remove('inactive');
    } else {
      attemptsCounter.textContent = `Next in: ${getTimeLeft()}`;
      attemptsCounter.classList.add('no-attempts');
      oneThingBtn.classList.add('inactive');
    }
  }
  function startLoadingAnimation() {
    currentLoadingIndex = 0;
    attemptsCounter.textContent = loadingPhrases[0];
    attemptsCounter.classList.remove('no-attempts');
    loadingInterval = setInterval(() => {
      currentLoadingIndex = (currentLoadingIndex + 1) % loadingPhrases.length;
      attemptsCounter.textContent = loadingPhrases[currentLoadingIndex];
    }, 2000);
  }
  function stopLoadingAnimation() {
    if (loadingInterval) {
      clearInterval(loadingInterval);
      loadingInterval = null;
    }
    updateCounterUI();
  }
  function getMidnightTimestamp() {
    const now = new Date();
    return new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1).getTime();
  }
  function getTimeLeft() {
    const dist = resetTime - Date.now();
    if (dist <= 0) {
      resetTime = getMidnightTimestamp();
      attemptsLeft = MAX_ATTEMPTS;
      localStorage.setItem('attemptsLeftAccount', attemptsLeft);
      localStorage.setItem('resetTimeAccount', resetTime);
      return '00h 00m';
    }
    const h = Math.floor(dist / (1000 * 60 * 60));
    const m = Math.floor((dist % (1000 * 60 * 60)) / (1000 * 60));
    return `${h}h ${m}m`;
  }
  function generateUUID() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
      const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  }
  function showSuccessTooltip() {
    const tooltip = document.getElementById('success-tooltip');
    if (tooltip) {
      tooltip.classList.add('show');
      console.log('Success tooltip shown');
      setTimeout(() => {
        tooltip.classList.remove('show');
        console.log('Success tooltip hidden');
      }, 3000);
    } else {
      console.error('Success tooltip element not found');
    }
  }
  function showCopyErrorTooltip() {
    const tooltip = document.getElementById('copy-error-tooltip');
    if (tooltip) {
      tooltip.classList.add('show');
      console.log('Copy error tooltip shown');
      setTimeout(() => {
        tooltip.classList.remove('show');
        console.log('Copy error tooltip hidden');
      }, 3000);
    } else {
      console.error('Copy error tooltip element not found');
    }
  }
  function showHeicErrorTooltip() {
    const tooltip = document.getElementById('heic-error-tooltip');
    if (tooltip) {
      tooltip.classList.add('show');
      console.log('HEIC error tooltip shown');
      setTimeout(() => {
        tooltip.classList.remove('show');
        console.log('HEIC error tooltip hidden');
      }, 3000);
    } else {
      console.error('HEIC error tooltip element not found');
    }
  }
  function showLocationErrorTooltip(message) {
    const tooltip = document.getElementById('location-error-tooltip');
    if (tooltip) {
      const tooltipText = tooltip.querySelector('span');
      if (tooltipText) {
        tooltipText.textContent = message;
      }
      tooltip.classList.add('show');
      console.log('Location error tooltip shown');
      setTimeout(() => {
        tooltip.classList.remove('show');
        console.log('Location error tooltip hidden');
      }, 3000);
    } else {
      console.error('Location error tooltip element not found');
    }
  }
  function showLocationSuccessTooltip() {
    const tooltip = document.getElementById('location-success-tooltip');
    if (tooltip) {
      tooltip.classList.add('show');
      console.log('Location success tooltip shown');
      setTimeout(() => {
        tooltip.classList.remove('show');
        console.log('Location success tooltip hidden');
      }, 3000);
    } else {
      console.error('Location success tooltip element not found');
    }
  }
  function showConfirmationPopup(one_thing_user_card_id, action) {
    const card = savedCards.find(c => c.one_thing_user_card_id === one_thing_user_card_id);
    if (!card) {
      console.log('Card not found in savedCards:', one_thing_user_card_id);
      return;
    }
    const titleEl = document.getElementById('confirmation-title');
    const descriptionEl = document.getElementById('confirmation-description');
    const confirmBtn = document.getElementById('confirmation-confirm');
    console.log('Found elements:', { titleEl: !!titleEl, descriptionEl: !!descriptionEl, confirmBtn: !!confirmBtn });
    if (action === 'make-public') {
      titleEl.textContent = 'Make Thing Public?';
      descriptionEl.textContent = 'This will make your completed thing visible to the community. Other users will be able to see and get inspired by your experience.';
      confirmBtn.textContent = 'Make Thing Public';
    } else if (action === 'make-private') {
      titleEl.textContent = 'Make Thing Private?';
      descriptionEl.innerHTML = 'Are you sure you want to remove this from the community? <br><br><strong>Your experience could inspire others!</strong> 🌟<br><br>By keeping it public, you\'re helping create a vibrant community of people sharing their adventures and discoveries.';
      confirmBtn.textContent = 'Make Private';
    }
    const popup = document.getElementById('confirmation-popup');
    if (popup) {
      popup.dataset.cardId = one_thing_user_card_id;
      popup.dataset.action = action;
      popup.classList.add('show');
      console.log('Popup shown with data:', { one_thing_user_card_id, action });
      console.log('Popup dataset after setting:', popup.dataset);
    } else {
      console.error('Confirmation popup element not found');
    }
  }
  function hideConfirmationPopup() {
    document.getElementById('confirmation-popup').classList.remove('show');
    delete document.getElementById('confirmation-popup').dataset.cardId;
    delete document.getElementById('confirmation-popup').dataset.action;
  }
  function scrollToGetOneThing() {
    const oneThingBtn = document.getElementById('one-thing-btn');
    if (oneThingBtn) {
      oneThingBtn.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  }
  function showReferralPopup() {
    const userId = ensureUserId();
    const referralCode = userId ? userId.substring(0, 8) : 'YOURCODE';
    document.getElementById('referral-code').textContent = referralCode;
    document.getElementById('referral-popup').classList.add('show');
  }
  function hideReferralPopup() {
    document.getElementById('referral-popup').classList.remove('show');
  }
  function copyReferralLink() {
    const userId = ensureUserId();
    const referralCode = userId ? userId.substring(0, 8) : 'YOURCODE';
    const fullLink = `https://globio.io/ref/${referralCode}`;
    navigator.clipboard.writeText(fullLink).then(() => {
      const copyBtn = document.getElementById('copy-referral-btn');
      copyBtn.textContent = 'Copied!';
      copyBtn.classList.add('copied');
      setTimeout(() => {
        copyBtn.textContent = 'Copy';
        copyBtn.classList.remove('copied');
      }, 2000);
    }).catch(err => {
      console.error('Failed to copy: ', err);
      showCopyErrorTooltip();
    });
  }
  function showCommunityEmptyPopup() {
    const userId = ensureUserId();
    const referralCode = userId ? userId.substring(0, 8) : 'YOURCODE';
    document.getElementById('community-referral-code').textContent = referralCode;
    document.getElementById('community-empty-popup').classList.add('show');
  }
  function hideCommunityEmptyPopup() {
    document.getElementById('community-empty-popup').classList.remove('show');
  }
  function copyCommunityReferralLink() {
    const userId = ensureUserId();
    const referralCode = userId ? userId.substring(0, 8) : 'YOURCODE';
    const fullLink = `https://globio.io/ref/${referralCode}`;
    navigator.clipboard.writeText(fullLink).then(() => {
      const copyBtn = document.getElementById('copy-community-referral-btn');
      copyBtn.textContent = 'Copied!';
      copyBtn.classList.add('copied');
      setTimeout(() => {
        copyBtn.textContent = 'Copy';
        copyBtn.classList.remove('copied');
      }, 2000);
    }).catch(err => {
      console.error('Failed to copy: ', err);
      showCopyErrorTooltip();
    });
  }
  function makeCardPublic(cardId) {
    cardId = parseInt(cardId);
    const card = savedCards.find(c => c.one_thing_user_card_id == cardId);
    if (!card) {
      console.error('Error makeCardPublic');
      return;
    }
    const userId = ensureUserId();
    const requestBody = {
      one_thing_user_card_id: cardId,
      published: true,
      completed: true,
      published_at: Date.now()
    };
    makeApiCall(requestBody, card);
  }
   function makeCardCompleted(one_thing_user_card_id) {
      const userId = ensureUserId();
      console.log('one_thing_user_card_id', one_thing_user_card_id);
      console.log('savedCards', savedCards);
      const cardIndex = savedCards.findIndex(c => c.one_thing_user_card_id == one_thing_user_card_id);
      if (cardIndex === -1) {
          console.log('Error makeCardCompleted: card not found');
          return;
      }
      const card = savedCards[cardIndex];
      card.type = 'completed';
      card.completed = true;
      card.completed_at = Date.now();
      savedCards.splice(cardIndex, 1);
      const requestBody = {
          one_thing_user_card_id: one_thing_user_card_id,
          completed: true,
          published: false,
          completed_at: Date.now()
      };
      makeApiCall(requestBody, card);
      loadSavedUserCards();
      loadCompletedUserCards();
      renderCardList(currentTypeFilter, currentCategoryFilter);
  }
  function makeApiCall(requestBody, card) {
    fetch(API_SET_CARD_PUBLISH, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody)
    })
      .then(response => {
        if (!response.ok) {
          console.error('❌ API response not ok:');
          throw new Error(`Failed to update card: ${response.status} ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('✅ API call successful:', data);
        if (requestBody.completed) {
          console.log('🎉 Card completed successfully!');
        } else if (requestBody.published !== undefined) {
          renderCardList(currentTypeFilter, currentCategoryFilter);
          const toggle = document.querySelector(`#toggle-${requestBody.one_thing_user_card_id}`);
          if (toggle) {
            toggle.disabled = false;
            toggle.checked = requestBody.published; // Set toggle to match published state
            console.log('✅ Updated toggle state for card:', requestBody.one_thing_user_card_id);
          } else {
            console.log('⚠️ Toggle not found for card:', requestBody.one_thing_user_card_id);
          }
          showSuccessTooltip();
          console.log('🎉 Successfully updated card publish state!');
        }
      })
      .catch(error => {
        console.error('❌ Error updating card:', error);
        console.error('❌ Error details:', {
          message: error.message,
          stack: error.stack,
          name: error.name
        });
        if (requestBody.published !== undefined) {
          const toggle = document.querySelector(`#toggle-${requestBody.one_thing_user_card_id}`);
          if (toggle) {
            toggle.disabled = false;
            toggle.checked = !requestBody.published; // Reset to previous state
            console.log('🔄 Reset toggle to previous state due to error');
          }
        }
      });
  }
  function makeCardPrivate(cardId) {
      cardId = parseInt(cardId);
      const card = savedCards.find(c => c.one_thing_user_card_id == cardId);
      if (!card) {
        console.error('Error makeCardPrivate');
        return;
      }
      const userId = ensureUserId();
      const requestBody = {
        one_thing_user_card_id: cardId,
        published: false,
        completed: true,
        published_at: null
      };
      makeApiCall(requestBody, card);
  }
  function uploadFile(file) {
      const formData = new FormData();
      formData.append("workspace_id", "1-0"); // ← сюда свой ID воркспейса
      formData.append("type", "image"); // можно "attachment", "video", "audio"
      formData.append("content", file);
      return fetch(API_SET_CARD_UPLOAD_IMAGE, {
          method: 'POST',
          headers: {
          },
          body: formData
      })
     .then(response => {
       return response.json();
     })
     .then(data => {
       const imagePath = data.path;
       return imagePath;
     })
      .catch(error => {
        console.error('❌ Error making card public:', error);
      });
};
  function renderCardList(filter = 'all', categoryFilter = 'all') {
    cardList.style.opacity = '0.7';
    cardList.style.transform = 'scale(0.98)';
    cardList.style.transition = 'all 0.2s ease';
    setTimeout(() => {
      cardList.innerHTML = '';
      const now = Date.now();
      savedCards = savedCards.filter(card => card.expiresAt > now);
      let toShow = [];
      if (filter === 'saved' || filter === 'all') {
        toShow = savedCards;
      }
      if (filter === 'completed' || filter === 'all') {
        toShow = savedCards;
      }
      if (filter === 'community' || filter === 'all') {
        toShow = savedCards;
      }
      console.log('to filter', filter);
      console.log('to show', toShow);
      console.log('to categoryFilter', categoryFilter);
      console.log('to savedCards', savedCards);
      if (categoryFilter === 'daily') {
          toShow = toShow.filter(card => card.category == "DAILY THINGS");
      }
      if (categoryFilter === 'places') {
          toShow = toShow.filter(card => card.category == "PLACES");
      }
      if (categoryFilter === 'local') {
          toShow = toShow.filter(card => card.category == "LOCAL CONTEXT");
      }
      if (toShow.length === 0) {
        let emptyStateHtml = '';
        if (filter === 'saved') {
          emptyStateHtml = `
        <div class="empty-state">
          <img src="https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/68949b2379142ee1bc95f3f2_6cd31bde078d550f5278843c00331b47_no-things-yet.svg" alt="">
          <h3>No saved things yet</h3>
          <p>This space will become a reflection of your progress, unique discoveries, and the helpful advice you've gathered along the way.</p>
          <button class="empty-state-btn" onclick="scrollToGetOneThing()">Get One Thing</button>
        </div>`;
        } else if (filter === 'completed') {
          emptyStateHtml = `
        <div class="empty-state">
          <img src="https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/68949b2379142ee1bc95f3f2_6cd31bde078d550f5278843c00331b47_no-things-yet.svg" alt="">
          <h3>No completed things yet</h3>
          <p>This space will become a reflection of your progress, unique discoveries, and the helpful advice you've gathered along the way.</p>
          <button class="empty-state-btn" onclick="scrollToGetOneThing()">Get One Thing</button>
        </div>`;
        } else if (filter === 'community') {
          emptyStateHtml = `
        <div class="empty-state">
          <img src="https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/6894a725c6e8a617ce6d1fe2_no-things-community.svg" alt="">
          <h3>No community contributions yet</h3>
          <p>Here you'll see all the things completed by the Globio community in your area—helpful tips and experiences, tailored to your current location.</p>
          <button class="empty-state-btn" onclick="showCommunityEmptyPopup()">Invite a Friend</button>
        </div>`;
        } else {
          emptyStateHtml = `
        <div class="empty-state">
          <img src="https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/68949b2379142ee1bc95f3f2_6cd31bde078d550f5278843c00331b47_no-things-yet.svg" alt="">
          <h3>No saved things yet</h3>
          <p>This space will become a reflection of your progress, unique discoveries, and the helpful advice you've gathered along the way.</p>
          <button class="empty-state-btn" onclick="scrollToGetOneThing()">Get One Thing</button>
        </div>`;
        }
        cardList.innerHTML = emptyStateHtml;
        return;
      }
      toShow.forEach((card, idx) => {
        const cardEl = document.createElement('div');
        cardEl.className = 'one-thing-card';
        let expiryHtml = '';
        if (card.type === 'saved') {
          const daysLeft = Math.ceil((card.expiresAt - now) / (1000 * 60 * 60 * 24));
          expiryHtml = `<div class="card-expiry">${daysLeft} day${daysLeft === 1 ? '' : 's'} left</div>`;
        }
        let toggleHtml = '';
        if (card.type === 'completed') {
          toggleHtml = `
        <div class="toggle-container">
          <span class="toggle-label">${card.published ? 'Public' : 'Make Public'}</span>
          <div class="toggle-switch">
            <input type="checkbox" id="toggle-${card.id}" ${card.published ? 'checked' : ''}>
            <label class="toggle-slider" for="toggle-${card.id}"></label>
          </div>
        </div>
      `;
        }
        const categoryText = getCategoryText(card.category);
        const isDefaultImage = card.imageSrc.includes('add-photo');
        let actionHtml = '';
        if (card.type === 'saved') {
          if (isDefaultImage) {
            const daysLeft = Math.ceil((card.expiresAt - Date.now()) / (1000 * 60 * 60 * 24));
            actionHtml = `<div class="card-expiry">${daysLeft} days left</div>`;
          } else {
            actionHtml = `<button class="complete-thing-btn" data-card-id="${card.one_thing_user_card_id}">Complete Thing</button>`;
          }
        } else if (card.type === 'completed') {
          actionHtml = '';
        } else {
          actionHtml = expiryHtml;
        }
        let authorHtml = '';
        if (card.type === 'community') {
          const authorName = card.author_name || card.user_name || 'Anonymous';
          authorHtml = `<div class="card-author">by ${authorName}</div>`;
        }
        let imageHtml = '';
        if (card.type === 'saved') {
          imageHtml = `
      <div class="card-image-placeholder">
        <img src="${card.imageSrc}" alt="Card image" class="${isDefaultImage ? 'add-photo-icon' : 'uploaded-image'}" style="display: ${isDefaultImage ? 'none' : 'block'}" data-card-id="${card.id}">
        <img src="https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/68ad7aea3e7e2dcd1b6e8350_add-photo.avif"
             alt="Add photo"
             class="add-photo-icon"
             style="display: ${isDefaultImage ? 'block' : 'none'}"
             data-card-id="${card.id}">
        <input type="file" accept="image/*,.heic,.heif" data-card-id="${card.id}">
        <div class="image-upload-loader" data-card-id="${card.id}">
          <div class="spinner"></div>
          <div class="loading-text">Uploading image...</div>
        </div>
      </div>`;
        } else if (card.type === 'completed') {
          imageHtml = `
      <div class="card-image-placeholder">
        <img src="${card.imageSrc}" alt="Card image" class="uploaded-image" style="display: block;" data-card-id="${card.id}">
      </div>`;
        } else {
          imageHtml = `
      <div class="card-image-placeholder">
        <img src="${card.imageSrc}" alt="Card image" class="uploaded-image" style="display: block;" data-card-id="${card.id}">
      </div>`;
        }
        cardEl.innerHTML = `
      <div class="card-category-tag ${card.category}">${categoryText}</div>
      ${imageHtml}
      <h4>${card.title}</h4>
      <p>${card.description}</p>
      ${actionHtml}
      ${toggleHtml}
      ${authorHtml}
    `;
        if (card.type === 'saved') {
          const placeholder = cardEl.querySelector('.card-image-placeholder');
          const img = cardEl.querySelector(`img[data-card-id="${card.id}"][alt="Card image"]`);
          const addPhotoIcon = cardEl.querySelector(`img[data-card-id="${card.id}"].add-photo-icon`);
          const input = cardEl.querySelector(`input[data-card-id="${card.id}"]`);
          if (isDefaultImage) {
            img.className = 'add-photo-icon';
          } else {
            img.className = 'uploaded-image';
          }
          input.addEventListener('change', e => {
            const file = e.target.files[0];
            if (file) {
              var userCardId = card.one_thing_user_card_id;
               uploadFile(file)
                 .then(function(imagePath) {
                  uploadFileName = imagePath;
                   const requestBody = {
                     one_thing_user_card_id: userCardId,
                     image: imagePath
                   };
                   return makeApiCall(requestBody, card);
                 })
                 .then(function(response) {
                   console.log("✅ Всё прошло успешно", response);
                 })
                 .catch(function(error) {
                   console.error("❌ Ошибка:", error);
                 });
              const loader = cardEl.querySelector(`.image-upload-loader[data-card-id="${card.id}"]`);
              const startTime = Date.now();
              const minLoadTime = 1000; // Minimum 1 second
              if (loader) {
                loader.classList.add('show');
              }
              const processImage = (imageBlob) => {
                const reader = new FileReader();
                reader.onload = ev => {
                  console.log('File processed for card:', card.id);
                  const elapsedTime = Date.now() - startTime;
                  const remainingTime = Math.max(0, minLoadTime - elapsedTime);
                  setTimeout(() => {
                    if (loader) {
                      loader.classList.remove('show');
                    }
                    img.src = ev.target.result;
                    img.className = 'uploaded-image';
                    img.style.display = 'block';
                    addPhotoIcon.style.display = 'none';
                    if (card.type === 'saved') {
                      const savedIndex = savedCards.findIndex(c => c.id === card.id);
                      if (savedIndex !== -1) {
                        console.log('Updating saved card image:', card.id);
                        savedCards[savedIndex].imageSrc = ev.target.result;
                        renderCardList(currentTypeFilter, currentCategoryFilter);
                      } else {
                        console.error('Saved card not found:', card.id);
                      }
                    }
                  }, remainingTime);
                };
                reader.onerror = () => {
                  console.error('Error reading file for card:', card.id);
                  if (loader) {
                    loader.classList.remove('show');
                  }
                };
                reader.readAsDataURL(imageBlob);
              };
              const isHeic = file.name.toLowerCase().endsWith('.heic') ||
                file.name.toLowerCase().endsWith('.heif') ||
                file.type === 'image/heic' ||
                file.type === 'image/heif';
              if (isHeic && typeof heic2any !== 'undefined') {
                console.log('Converting HEIC file to JPEG for card:', card.id);
                heic2any({
                  blob: file,
                  toType: 'image/jpeg',
                  quality: 0.8
                }).then(convertedBlob => {
                  console.log('HEIC converted successfully for card:', card.id);
                  processImage(convertedBlob);
                }).catch(error => {
                  console.error('Error converting HEIC file for card:', card.id, error);
                  if (loader) {
                    loader.classList.remove('show');
                  }
                  showHeicErrorTooltip();
                });
              } else {
                console.log('Processing regular image file for card:', card.id);
                processImage(file);
              }
            }
          });
        }
        const completeBtnPopup = cardEl.querySelector('.complete-thing-btn');
        if (completeBtnPopup) {
          completeBtnPopup.addEventListener('click', () => {
            if (card.type === 'saved') {
              console.log('complete-thing-btn clicked');
              makeCardCompleted(card.one_thing_user_card_id);
              showSuccessTooltip();
              filterButtonsGroup.forEach(b => b.classList.remove('active'));
              const completedButton = document.querySelector('button[data-filter="completed"]');
              if (completedButton) {
                completedButton.classList.add('active');
                currentTypeFilter = 'completed';
                localStorage.setItem('currentTypeFilter', 'completed');
              }
              renderCardList('completed', currentCategoryFilter);
            }
          });
        }
        if (card.type === 'completed') {
          const toggle = cardEl.querySelector('input[type="checkbox"]');
          if (toggle) {
            toggle.addEventListener('change', (e) => {
              toggle.disabled = true;
              if (e.target.checked && !card.published) {
                console.log('Showing make-public confirmation for card:', card.id);
                showConfirmationPopup(card.one_thing_user_card_id, 'make-public');
              } else if (!e.target.checked && card.published) {
                console.log('Showing make-private confirmation for card:', card.id);
                showConfirmationPopup(card.one_thing_user_card_id, 'make-private');
              } else {
                console.log('No action needed - toggle state matches public state');
              }
              setTimeout(() => {
                e.target.checked = card.published;
                toggle.disabled = false;
                console.log('Reset toggle for card:', card.id, 'to:', card.published);
              }, 150);
            });
          }
        }
        cardList.appendChild(cardEl);
      });
      setTimeout(() => {
        cardList.style.opacity = '1';
        cardList.style.transform = 'scale(1)';
      }, 50);
    });
  }
  function loadSavedUserCards() {
    const userId = ensureUserId();
    if (!userId) {
      console.log('No userId');
      return;
    }
    fetch(API_USERS + '/' + userId)
      .then(response => {
        console.log('loadUserCards response status:', response.status);
        return response.json();
      })
      .then(data => {
        if (data) {
       var usersCards = data.users_cards
             .filter(item => item.created_at !== null)
             .map(item => ({
               ...item.card,
               expired_at: item.expired_at,
               one_thing_user_card_id: item.id,
               completed: item.completed,
               published: item.published,
               created_at: item.created_at
             }))
             .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
          var formattedCards = usersCards.map(card => ({
            id: card.id,
            title: card.name,
            description: `Discover the ${card.name} in ${card.city}. A great spot for ${card.tags.split(",").join(", ")}.`,
            category: card.tags.split(",")[0]?.toUpperCase() || "LOCAL CONTEXT",
            imageSrc: "https://cdn.prod.website-files.com/64d15b8bef1b2f28f40b4f1e/68ad7aea3e7e2dcd1b6e8350_add-photo.avif",
            expiresAt: card.expired_at,
            one_thing_user_card_id: card.one_thing_user_card_id,
            completed: card.completed,
            published: card.published,
            type: "saved"
          }));
          savedCards = formattedCards;
          renderCardList('saved', currentCategoryFilter);
        }
      })
      .catch(error => {
        console.error('Error loading public cards:', error);
      });
  }
   function loadCompletedUserCards() {
        const userId = ensureUserId();
        if (!userId) {
          console.log('No userId');
          return;
        }
        fetch(API_USERS + '/' + userId)
          .then(response => {
            return response.json();
          })
          .then(data => {
            if (data) {
              var usersCards = data.users_cards
                .filter(item => item.completed_at !== null)
                .map(item => ({
                  ...item.card,
                  expired_at: item.expired_at,
                  one_thing_user_card_id: item.id,
                  completed: item.completed,
                  published: item.published,
                  imageSrc: item.image,
                  completed_at: item.completed_at
                }))
                .sort((a, b) => new Date(b.completed_at) - new Date(a.completed_at));
              var formattedCards = usersCards.map(card => ({
                id: card.id,
                title: card.name,
                description: `Discover the ${card.name} in ${card.city}. A great spot for ${card.tags.split(",").join(", ")}.`,
                category: card.tags.split(",")[0]?.toUpperCase() || "LOCAL CONTEXT",
                imageSrc: "https://xu8w-at8q-hywg.n7d.xano.io" + card.imageSrc,
                expiresAt: card.expired_at,
                one_thing_user_card_id: card.one_thing_user_card_id,
                completed: card.completed,
                published: card.published,
                type: "completed"
              }));
              savedCards = formattedCards;
              renderCardList('completed', currentCategoryFilter);
            }
          })
          .catch(error => {
            console.error('Error loading public cards:', error);
          });
  }
   function loadCommunityUserCards() {
        const userId = ensureUserId();
        if (!userId) {
          console.log('No userId');
          return;
        }
        fetch(API_USERS + '/' + userId)
          .then(response => {
            return response.json();
          })
          .then(data => {
            if (data) {
              var usersCards = data.users_cards
                .filter(item => item.published_at !== null)
                .map(item => ({
                  ...item.card,
                  expired_at: item.expired_at,
                  one_thing_user_card_id: item.id,
                  completed: item.completed,
                  published: item.published,
                  imageSrc: item.image,
                  published_at: item.published_at
                }))
                .sort((a, b) => new Date(b.published_at) - new Date(a.published_at));
              var formattedCards = usersCards.map(card => ({
                id: card.id,
                  title: card.name,
                  description: `Discover the ${card.name} in ${card.city}. A great spot for ${card.tags.split(",").join(", ")}.`,
                  category: card.tags.split(",")[0]?.toUpperCase() || "LOCAL CONTEXT",
                  imageSrc: "https://xu8w-at8q-hywg.n7d.xano.io" + card.imageSrc,
                  expiresAt: card.expired_at,
                  one_thing_user_card_id: card.one_thing_user_card_id,
                  completed: card.completed,
                  published: card.published,
                type: "community"
              }));
              savedCards = formattedCards;
              renderCardList('community', currentCategoryFilter);
            }
          })
          .catch(error => {
            console.error('Error loading public cards:', error);
          });
      }
  completedButton.addEventListener('click', () => {
      loadCompletedUserCards();
  });
  savedButton.addEventListener('click', () => {
      loadSavedUserCards();
  });
  communityButton.addEventListener('click', () => {
      loadCommunityUserCards();
  });
  function initializeDropdown() {
    const dropdownTrigger = document.getElementById('all-categories-dropdown');
    const dropdownMenu = document.getElementById('categories-dropdown-menu');
    const dropdownItems = dropdownMenu.querySelectorAll('.dropdown-item');
    if (!dropdownTrigger || !dropdownMenu) return;
    dropdownItems.forEach(item => {
      if (item.getAttribute('data-category') === currentCategoryFilter) {
        item.classList.add('selected');
        dropdownTrigger.querySelector('span').textContent = item.querySelector('span').textContent;
      } else {
        item.classList.remove('selected');
      }
    });
    dropdownTrigger.addEventListener('click', (e) => {
      e.stopPropagation();
      console.log('Dropdown clicked, current state:', {
        isActive: dropdownTrigger.classList.contains('active'),
        isShow: dropdownMenu.classList.contains('show')
      });
      dropdownTrigger.classList.toggle('active');
      dropdownMenu.classList.toggle('show');
      if (!dropdownMenu.classList.contains('show')) {
        dropdownTrigger.classList.add('active');
      }
      console.log('Dropdown state after toggle:', {
        isActive: dropdownTrigger.classList.contains('active'),
        isShow: dropdownMenu.classList.contains('show')
      });
    });
    dropdownItems.forEach(item => {
      item.addEventListener('click', (e) => {
        e.stopPropagation();
        const category = item.getAttribute('data-category');
        dropdownTrigger.querySelector('span').textContent = item.querySelector('span').textContent;
        dropdownItems.forEach(i => i.classList.remove('selected'));
        item.classList.add('selected');
console.log('BUTTON DROP down');
        dropdownTrigger.classList.remove('active');
        dropdownMenu.classList.remove('show');
        dropdownTrigger.classList.add('active');
        currentCategoryFilter = category;
        localStorage.setItem('currentCategoryFilter', category);
        renderCardList(currentTypeFilter, currentCategoryFilter);
      });
    });
    document.addEventListener('click', (e) => {
      if (!dropdownTrigger.contains(e.target) && !dropdownMenu.contains(e.target)) {
          console.log('BUTTON CLICK');
        dropdownTrigger.classList.remove('active');
        dropdownMenu.classList.remove('show');
        dropdownTrigger.classList.add('active');
      }
    });
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
          console.log('BUTTONEscape');
        dropdownTrigger.classList.remove('active');
        dropdownMenu.classList.remove('show');
        dropdownTrigger.classList.add('active');
      }
    });
  }
})();